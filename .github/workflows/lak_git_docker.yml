name: Build, Run, Test, and Deploy

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3️⃣ Build Docker image
      - name: Build Docker image
        run: docker build -t my-app-image .

      # 4️⃣ Run server container
      - name: Run server container
        run: docker run -d -p 5000:5000 --name my-app-container my-app-image

      # 5️⃣ Wait for server to start
      - name: Wait for server to start
        run: sleep 15

      # 6️⃣ Run Robot Framework Tests
      - name: Run Robot Framework Tests
        run: docker exec -i my-app-container /bin/bash -c "robot /app/login_test.robot"

      # 7️⃣ Show Docker logs if test fails
      - name: Show Docker logs if test fails
        if: failure()
        run: docker logs my-app-container

      # 8️⃣ Install Render CLI, Authenticate and Deploy (only if tests pass)
      - name: Install Render CLI and Deploy
        if: success()
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          set -euo pipefail

          echo "➡️ Attempting to download Render CLI (tries a few known release asset URLs)"

          # Candidate URLs (tries in order). These match the release asset naming used on GitHub releases (cli_<ver>_linux_amd64.zip).
          urls=(
            "https://github.com/render-oss/cli/releases/download/v2.2.0/cli_2.2.0_linux_amd64.zip"
            "https://github.com/render-oss/cli/releases/download/v2.1.5/cli_2.1.5_linux_amd64.zip"
            "https://github.com/render-oss/cli/releases/download/v2.1.4/cli_2.1.4_linux_amd64.zip"
            # fallback generic (may or may not exist depending on repo)
            "https://github.com/render-oss/cli/releases/latest/download/cli_linux_amd64.zip"
          )

          succeeded=0
          for u in "${urls[@]}"; do
            echo "Trying: $u"
            # -f to fail on HTTP error, -L to follow redirects, -S show error, -o target file
            if curl -fL -S -o render-cli.zip "$u"; then
              sz=$(wc -c < render-cli.zip || echo 0)
              echo "Downloaded size: ${sz} bytes"
              if [ "$sz" -gt 1000 ]; then
                echo "Good download (size > 1k)."
                succeeded=1
                break
              else
                echo "Downloaded file looks tiny (<=1k). Showing contents for debug:"
                echo "------ start of file ------"
                cat render-cli.zip || true
                echo "------- end of file -------"
                rm -f render-cli.zip
              fi
            else
              echo "curl failed for $u"
              rm -f render-cli.zip || true
            fi
          done

          if [ "$succeeded" -eq 0 ]; then
            echo "All release-asset downloads failed or returned tiny responses — falling back to Render's install script."
            echo "Running render.com/install script (fallback)..."
            # run the official install script (may install in user dir); we'll then try to locate it
            if curl -fsSL https://render.com/install | bash; then
              echo "Install script executed. Searching for 'render' binary in common locations..."
              # Try to locate binary in PATH and common install locations
              if command -v render >/dev/null 2>&1 ; then
                echo "render found in PATH: $(command -v render)"
                render --version || true
              elif [ -x "$HOME/.local/bin/render" ]; then
                echo "Found at $HOME/.local/bin/render. Moving to /usr/local/bin/"
                sudo mv "$HOME/.local/bin/render" /usr/local/bin/render
                sudo chmod +x /usr/local/bin/render
              else
                echo "ERROR: render binary not found after fallback install. Exiting."
                exit 1
              fi
            else
              echo "Fallback install script failed. Exiting."
              exit 1
            fi
          else
            # we have a good zip
            echo "Unzipping downloaded asset..."
            mkdir -p render_cli_extracted
            unzip -q render-cli.zip -d render_cli_extracted

            # find a plausible binary inside the zip
            candidate=$(find render_cli_extracted -type f -maxdepth 3 -print | grep -E '/render$|/cli$|render$|cli$' | head -n1 || true)
            if [ -z "$candidate" ]; then
              # pick the first file if no obvious name
              candidate=$(find render_cli_extracted -type f -maxdepth 3 -print | head -n1)
            fi

            if [ -z "$candidate" ]; then
              echo "No file found inside zip — aborting."
              ls -la render_cli_extracted || true
              exit 1
            fi

            echo "Candidate binary found: $candidate"
            sudo mv "$candidate" /usr/local/bin/render
            sudo chmod +x /usr/local/bin/render
          fi

          echo "➡️ Final check: render --version"
          render --version

          echo "➡️ Authenticate with Render"
          # Non-interactive login using API key (RENDER_API_KEY must be in repo secrets)
          render login --api-key "${RENDER_API_KEY}"

          echo "➡️ Deploying service"
          render deploy service <SERVICE-ID> --branch master
